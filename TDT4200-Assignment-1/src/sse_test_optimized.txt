#include "sse_test.hpp"
#include <stdlib.h>
#include <time.h>
#include <chrono>
#include <thread>
#include <mutex>

inline float randFloat() {
    return (float) (rand()) / (float) (RAND_MAX);
}

inline sse_float4 randFloat4() {
    sse_float4 res;
    res.elements[0] = randFloat(); //x
    res.elements[1] = randFloat(); //y
    res.elements[2] = randFloat(); //z
    res.elements[3] = randFloat(); //w
    return res;
}

void sse_test(Mesh &mesh) {
    //Not allowed to change:
    unsigned int const loadFactor = 1000;
    //

    std::vector<sse_float4> vertices;
    std::vector<sse_float4> rand1;
    rand1.resize(mesh.vertexCount);
    std::vector<sse_float4> rand2;
    rand2.resize(mesh.vertexCount);
    std::vector<sse_float4> rand3;
    rand3.resize(mesh.vertexCount);
    std::vector<sse_float4> rand4;
    rand4.resize(mesh.vertexCount); //Memory
    srand(time(NULL));

    vertices.resize(mesh.vertexCount);
    auto start3 = std::chrono::high_resolution_clock::now();
    float4 temp;

    std::cout << "SSE_TEST: Initializing vectors... " << std::flush;
    for (unsigned int i=0; i < vertices.size(); i++) {
        temp = mesh.vertices[i];
        vertices[i].elements[0] = temp.x;
        vertices[i].elements[1] = temp.y;
        vertices[i].elements[2] = temp.z;
        vertices[i].elements[3] = temp.w;
        rand1.push_back(randFloat4());
        rand2.push_back(randFloat4());
        rand3.push_back(randFloat4());
        rand4.push_back(randFloat4());
    }
    std::cout << "finished!"  << std::endl;
    auto end3 = std::chrono::high_resolution_clock::now();
    std::cout << "Initializing vectors took: " << std::chrono::duration_cast<std::chrono::milliseconds>(end3 - start3).count() << " ms" << std::endl;
    auto start1 = std::chrono::high_resolution_clock::now();
    for (unsigned int j = 0; j < loadFactor; j++) { //Partial loop unrolling 
        std::cout << "SSE_TEST: " << (j+1) << "/" << loadFactor << " Crunching numbers on " << vertices.size() << " vertices... " << "\r" << std::flush;
        for (unsigned int i=0; i < vertices.size(); i+=3) {
            vertices[i+0].elements[0] = (vertices[i+0].elements[0] + rand1[i+0].elements[0]- rand2[i+0].elements[0]) * rand3[i+0].elements[0]; //x
            vertices[i+1].elements[0] = (vertices[i+1].elements[0] + rand1[i+1].elements[0]- rand2[i+1].elements[0]) * rand3[i+1].elements[0]; //x
            vertices[i+2].elements[0] = (vertices[i+2].elements[0] + rand1[i+2].elements[0]- rand2[i+2].elements[0]) * rand3[i+2].elements[0]; //x

            vertices[i+0].elements[1] = (vertices[i+0].elements[1] + rand1[i+0].elements[1]- rand2[i+0].elements[1]) * rand3[i+0].elements[1]; //y
            vertices[i+1].elements[1] = (vertices[i+1].elements[1] + rand1[i+1].elements[1]- rand2[i+1].elements[1]) * rand3[i+1].elements[1]; //y
            vertices[i+2].elements[1] = (vertices[i+2].elements[1] + rand1[i+2].elements[1]- rand2[i+2].elements[1]) * rand3[i+2].elements[1]; //y

            vertices[i+0].elements[2] = (vertices[i+0].elements[2] + rand1[i+0].elements[2]- rand2[i+0].elements[2]) * rand3[i+0].elements[2]; //z
            vertices[i+1].elements[2] = (vertices[i+1].elements[2] + rand1[i+1].elements[2]- rand2[i+1].elements[2]) * rand3[i+1].elements[2]; //z
            vertices[i+2].elements[2] = (vertices[i+2].elements[2] + rand1[i+2].elements[2]- rand2[i+2].elements[2]) * rand3[i+2].elements[2]; //z

            vertices[i+0].elements[3] = (vertices[i+0].elements[3] + rand1[i+0].elements[3]- rand2[i+0].elements[3]) * rand3[i+0].elements[3]; //w
            vertices[i+1].elements[3] = (vertices[i+1].elements[3] + rand1[i+1].elements[3]- rand2[i+1].elements[3]) * rand3[i+1].elements[3]; //w
            vertices[i+2].elements[3] = (vertices[i+2].elements[3] + rand1[i+2].elements[3]- rand2[i+2].elements[3]) * rand3[i+2].elements[3]; //w


            if (rand4[i+0].elements[0] != 0 && rand4[i+0].elements[1] != 0 && rand4[i+0].elements[2] != 0 && rand4[i+0].elements[3] != 0) {
                vertices[i+0].elements[0] = vertices[i+0].elements[0] / rand4[i+0].elements[0]; //x
                vertices[i+0].elements[1] = vertices[i+0].elements[1] / rand4[i+0].elements[1]; //y
                vertices[i+0].elements[2] = vertices[i+0].elements[2] / rand4[i+0].elements[2]; //z
                vertices[i+0].elements[3] = vertices[i+0].elements[3] / rand4[i+0].elements[3]; //w
            }
            if (rand4[i+1].elements[0] != 0 && rand4[i+1].elements[1] != 0 && rand4[i+1].elements[2] != 0 && rand4[i+1].elements[3] != 0) {
                vertices[i+1].elements[0] = vertices[i+1].elements[0] / rand4[i+1].elements[0]; //x
                vertices[i+1].elements[1] = vertices[i+1].elements[1] / rand4[i+1].elements[1]; //y
                vertices[i+1].elements[2] = vertices[i+1].elements[2] / rand4[i+1].elements[2]; //z
                vertices[i+1].elements[3] = vertices[i+1].elements[3] / rand4[i+1].elements[3]; //w
            }
            if (rand4[i+2].elements[0] != 0 && rand4[i+2].elements[1] != 0 && rand4[i+2].elements[2] != 0 && rand4[i+2].elements[3] != 0) {
                vertices[i+2].elements[0] = vertices[i+2].elements[0] / rand4[i+2].elements[0]; //x
                vertices[i+2].elements[1] = vertices[i+2].elements[1] / rand4[i+2].elements[1]; //y
                vertices[i+2].elements[2] = vertices[i+2].elements[2] / rand4[i+2].elements[2]; //z
                vertices[i+2].elements[3] = vertices[i+2].elements[3] / rand4[i+2].elements[3]; //w
            }

        }
    }
    std::cout << std::endl;
    auto end1 = std::chrono::high_resolution_clock::now();
    std::cout << "Crunching values took: " << std::chrono::duration_cast<std::chrono::milliseconds>(end1 - start1).count() << " ms" << std::endl;
}
